// Mocks generated by Mockito 5.1.0 from annotations
// in diyapp/test/application/settings/contact/contact_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:diyapp/domain/core/apps_launcher.dart' as _i3;
import 'package:diyapp/domain/settings/contact/launch_failure.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [AppsLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppsLauncher extends _i1.Mock implements _i3.AppsLauncher {
  MockAppsLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>> launchEmailAppWith(
          {String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#launchEmailAppWith, [], {#email: email}),
          returnValue: Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>>.value(
              _FakeEither_0<_i5.LaunchFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>> launchBrowserAppWith(
          {String? url}) =>
      (super.noSuchMethod(
          Invocation.method(#launchBrowserAppWith, [], {#url: url}),
          returnValue: Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>>.value(
              _FakeEither_0<_i5.LaunchFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>> launchPhoneDialerAppWith(
          {String? phoneNumber}) =>
      (super.noSuchMethod(
          Invocation.method(
              #launchPhoneDialerAppWith, [], {#phoneNumber: phoneNumber}),
          returnValue: Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>>.value(
              _FakeEither_0<_i5.LaunchFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.LaunchFailure, _i2.Unit>>);
}
