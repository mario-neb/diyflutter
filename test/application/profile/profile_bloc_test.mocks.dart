// Mocks generated by Mockito 5.1.0 from annotations
// in diyapp/test/application/profile/profile_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i13;

import 'package:dartz/dartz.dart' as _i2;
import 'package:diyapp/domain/auth/auth_facade.dart' as _i3;
import 'package:diyapp/domain/auth/auth_failure.dart' as _i5;
import 'package:diyapp/domain/auth/forgot_password_failure.dart' as _i10;
import 'package:diyapp/domain/auth/login_failure.dart' as _i8;
import 'package:diyapp/domain/auth/user.dart' as _i7;
import 'package:diyapp/domain/profile/image_picker.dart' as _i11;
import 'package:diyapp/domain/profile/profile_failure.dart' as _i12;
import 'package:diyapp/domain/register/entities/register_data.dart' as _i6;
import 'package:diyapp/domain/value_objects/value_objects.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeOption_1<A> extends _i1.Fake implements _i2.Option<A> {}

/// A class which mocks [AuthFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthFacade extends _i1.Mock implements _i3.AuthFacade {
  MockAuthFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i3.AuthenticationStatus> get authenticationStatus =>
      (super.noSuchMethod(Invocation.getter(#authenticationStatus),
              returnValue: Stream<_i3.AuthenticationStatus>.empty())
          as _i4.Stream<_i3.AuthenticationStatus>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, _i2.Unit>> register(
          _i6.RegisterData? registerData) =>
      (super.noSuchMethod(Invocation.method(#register, [registerData]),
              returnValue: Future<_i2.Either<_i5.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_0<_i5.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Option<_i7.User?>> getLoggedInUser() => (super.noSuchMethod(
          Invocation.method(#getLoggedInUser, []),
          returnValue:
              Future<_i2.Option<_i7.User?>>.value(_FakeOption_1<_i7.User?>()))
      as _i4.Future<_i2.Option<_i7.User?>>);
  @override
  _i4.Future<_i2.Either<_i8.LoginFailure, _i3.AuthenticationStatus>>
      loginWithCredentials({_i9.Email? email, _i9.Password? password}) =>
          (super.noSuchMethod(
              Invocation.method(#loginWithCredentials, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i2.Either<_i8.LoginFailure, _i3.AuthenticationStatus>>.value(
                      _FakeEither_0<_i8.LoginFailure, _i3.AuthenticationStatus>())) as _i4
              .Future<_i2.Either<_i8.LoginFailure, _i3.AuthenticationStatus>>);
  @override
  _i4.Future<_i2.Either<_i8.LoginFailure, _i3.AuthenticationStatus>>
      logInWithBiometrics() => (super.noSuchMethod(
          Invocation.method(#logInWithBiometrics, []),
          returnValue: Future<
                  _i2.Either<_i8.LoginFailure, _i3.AuthenticationStatus>>.value(
              _FakeEither_0<_i8.LoginFailure, _i3.AuthenticationStatus>())) as _i4
          .Future<_i2.Either<_i8.LoginFailure, _i3.AuthenticationStatus>>);
  @override
  _i4.Future<_i2.Either<_i10.ForgotPasswordFailure, _i2.Unit>> forgotPassword(
          _i9.Email? email) =>
      (super.noSuchMethod(Invocation.method(#forgotPassword, [email]),
          returnValue:
              Future<_i2.Either<_i10.ForgotPasswordFailure, _i2.Unit>>.value(
                  _FakeEither_0<_i10.ForgotPasswordFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i10.ForgotPasswordFailure, _i2.Unit>>);
  @override
  _i4.Future<void> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i11.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i12.ProfileFailure, _i13.File>> pickFromCamera() =>
      (super.noSuchMethod(Invocation.method(#pickFromCamera, []),
          returnValue: Future<_i2.Either<_i12.ProfileFailure, _i13.File>>.value(
              _FakeEither_0<_i12.ProfileFailure, _i13.File>())) as _i4
          .Future<_i2.Either<_i12.ProfileFailure, _i13.File>>);
  @override
  _i4.Future<_i2.Either<_i12.ProfileFailure, _i13.File>> pickFromGallery() =>
      (super.noSuchMethod(Invocation.method(#pickFromGallery, []),
          returnValue: Future<_i2.Either<_i12.ProfileFailure, _i13.File>>.value(
              _FakeEither_0<_i12.ProfileFailure, _i13.File>())) as _i4
          .Future<_i2.Either<_i12.ProfileFailure, _i13.File>>);
}
